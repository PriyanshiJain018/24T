<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>गुणस्थान यात्रा - Spiritual Journey Game</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #1f2937;
        }
        
        .game-container {
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .game-header {
            background: white;
            border-radius: 20px;
            padding: 30px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        
        .game-title {
            font-size: 28px;
            font-weight: bold;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 10px;
        }
        
        .game-subtitle {
            color: #6b7280;
            font-size: 16px;
        }
        
        .game-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: white;
            border-radius: 16px;
            padding: 20px;
            text-align: center;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        
        .stat-value {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .stat-label {
            color: #6b7280;
            font-size: 14px;
        }
        
        .game-stage {
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            animation: slideIn 0.5s ease;
        }
        
        @keyframes slideIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .gunasthan-display {
            text-align: center;
            margin-bottom: 30px;
            padding: 30px;
            border-radius: 16px;
            position: relative;
            overflow: hidden;
        }
        
        .gunasthan-number {
            font-size: 48px;
            font-weight: bold;
            color: white;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .gunasthan-name {
            font-size: 24px;
            font-weight: 600;
            color: white;
            margin-bottom: 5px;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
        }
        
        .gunasthan-english {
            font-size: 16px;
            color: rgba(255,255,255,0.9);
            margin-bottom: 15px;
        }
        
        .gunasthan-description {
            font-size: 14px;
            color: rgba(255,255,255,0.8);
            max-width: 600px;
            margin: 0 auto;
            line-height: 1.6;
        }
        
        .game-content {
            line-height: 1.8;
            font-size: 16px;
            margin-bottom: 30px;
            color: #374151;
        }
        
        .choices-container {
            display: grid;
            gap: 15px;
            margin-bottom: 30px;
        }
        
        .choice-button {
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 20px;
            text-align: left;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 16px;
            box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
        }
        
        .choice-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);
        }
        
        .choice-button.disabled {
            background: #9ca3af;
            cursor: not-allowed;
            box-shadow: none;
        }
        
        .choice-button.disabled:hover {
            transform: none;
        }
        
        .choice-title {
            font-weight: 600;
            margin-bottom: 5px;
        }
        
        .choice-description {
            font-size: 14px;
            opacity: 0.9;
        }
        
        .message {
            padding: 20px;
            border-radius: 12px;
            margin: 20px 0;
            font-weight: 500;
        }
        
        .message.success {
            background: linear-gradient(135deg, #dcfce7, #bbf7d0);
            border: 1px solid #86efac;
            color: #16a34a;
        }
        
        .message.error {
            background: linear-gradient(135deg, #fee2e2, #fecaca);
            border: 1px solid #f87171;
            color: #dc2626;
        }
        
        .message.warning {
            background: linear-gradient(135deg, #fef3c7, #fde68a);
            border: 1px solid #fbbf24;
            color: #d97706;
        }
        
        .message.info {
            background: linear-gradient(135deg, #dbeafe, #bfdbfe);
            border: 1px solid #60a5fa;
            color: #2563eb;
        }
        
        .progress-path {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin: 30px 0;
            flex-wrap: wrap;
        }
        
        .path-stage {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
            font-size: 14px;
        }
        
        .path-stage.completed {
            background: #10b981;
        }
        
        .path-stage.current {
            background: #3b82f6;
            animation: pulse 2s infinite;
        }
        
        .path-stage.locked {
            background: #9ca3af;
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }
        
        .path-arrow {
            color: #6b7280;
            font-size: 18px;
        }
        
        .quiz-container {
            background: #f9fafb;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            padding: 20px;
            margin: 20px 0;
        }
        
        .quiz-question {
            font-weight: 600;
            margin-bottom: 15px;
            color: #1f2937;
        }
        
        .quiz-options {
            display: grid;
            gap: 10px;
        }
        
        .quiz-option {
            background: white;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .quiz-option:hover {
            border-color: #3b82f6;
            background: #f0f9ff;
        }
        
        .quiz-option.selected {
            border-color: #3b82f6;
            background: #dbeafe;
        }
        
        .action-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 30px;
        }
        
        .action-button {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .action-button.primary {
            background: #3b82f6;
            color: white;
        }
        
        .action-button.secondary {
            background: #e5e7eb;
            color: #374151;
        }
        
        .action-button:hover {
            transform: translateY(-2px);
        }
        
        .karma-display {
            background: linear-gradient(135deg, #fef3c7, #fde68a);
            border: 1px solid #fbbf24;
            border-radius: 12px;
            padding: 20px;
            margin: 20px 0;
            text-align: center;
        }
        
        .karma-title {
            font-weight: 600;
            color: #92400e;
            margin-bottom: 10px;
        }
        
        .karma-bars {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }
        
        .karma-bar {
            background: white;
            border-radius: 8px;
            padding: 12px;
        }
        
        .karma-name {
            font-size: 12px;
            color: #6b7280;
            margin-bottom: 5px;
        }
        
        .karma-progress {
            width: 100%;
            height: 6px;
            background: #e5e7eb;
            border-radius: 3px;
            overflow: hidden;
        }
        
        .karma-fill {
            height: 100%;
            border-radius: 3px;
            transition: width 0.5s ease;
        }
        
        .hidden {
            display: none;
        }
        
        @media (max-width: 640px) {
            .game-container {
                padding: 15px;
            }
            
            .game-header {
                padding: 20px;
            }
            
            .game-title {
                font-size: 24px;
            }
            
            .gunasthan-number {
                font-size: 36px;
            }
            
            .gunasthan-name {
                font-size: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="game-header">
            <div class="game-title">🧘 गुणस्थान यात्रा</div>
            <div class="game-subtitle">Spiritual Journey Through 14 Stages of Soul Development</div>
        </div>
        
        <div class="game-stats">
            <div class="stat-card">
                <div class="stat-value" id="current-stage">1</div>
                <div class="stat-label">Current Gunasthan</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="total-moves">0</div>
                <div class="stat-label">Total Transitions</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="highest-reached">1</div>
                <div class="stat-label">Highest Stage Reached</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="game-time">0:00</div>
                <div class="stat-label">Journey Time</div>
            </div>
        </div>
        
        <div class="progress-path" id="progress-path"></div>
        
        <div class="game-stage" id="game-stage">
            <div class="gunasthan-display" id="gunasthan-display"></div>
            <div class="game-content" id="game-content"></div>
            <div class="choices-container" id="choices-container"></div>
            <div id="message-container"></div>
            <div id="quiz-container" class="hidden"></div>
            <div class="karma-display" id="karma-display"></div>
        </div>
        
        <div class="action-buttons">
            <button class="action-button secondary" onclick="resetGame()">🔄 Restart Journey</button>
            <button class="action-button secondary" onclick="showHelp()">❓ Help</button>
            <button class="action-button primary" onclick="showProgress()">📊 Progress</button>
        </div>
    </div>

    <script>
        // Game data from the main app
        const gunasthansData = {
            1: { nameHi: "मिथ्यात्व", nameEn: "Mithyatva", english: "False Belief", description: "The soul possesses wrong belief and is bound by all karmas.", color: "#EF4444" },
            2: { nameHi: "सासादन", nameEn: "Sasadan", english: "Downfall", description: "Temporary stage when a soul falls from right belief back to wrong belief.", color: "#F87171" },
            3: { nameHi: "मिश्र", nameEn: "Mishra", english: "Mixed Belief", description: "The soul has mixed right and wrong beliefs simultaneously.", color: "#FB923C" },
            4: { nameHi: "अविरत सम्यग्दृष्टि", nameEn: "Avirat Samyagdrishti", english: "Right Belief without Conduct", description: "Soul has right belief but has not yet adopted right conduct.", color: "#FBBF24" },
            5: { nameHi: "देशविरत", nameEn: "Deshvirat", english: "Partial Vows", description: "Soul adopts partial vows and begins practicing limited self-restraint.", color: "#A3E635" },
            6: { nameHi: "प्रमत्तविरत", nameEn: "Pramattavirat", english: "Careless Conduct", description: "Soul has taken complete vows but is still careless in observance.", color: "#4ADE80" },
            7: { nameHi: "अप्रमत्तविरत", nameEn: "Apramattavirat", english: "Careful Conduct", description: "Soul observes vows with complete care and attention.", color: "#10B981" },
            8: { nameHi: "अपूर्वकरण", nameEn: "Apurvakarana", english: "Unprecedented Thought-activity", description: "Soul experiences unprecedented spiritual transformation.", color: "#14B8A6" },
            9: { nameHi: "अनिवृत्तिकरण", nameEn: "Anivrittikarana", english: "Subtle Passion", description: "Only subtle forms of passion remain; gross passions eliminated.", color: "#06B6D4" },
            10: { nameHi: "सूक्ष्मसांपराय", nameEn: "Sukshmasamparaya", english: "Subtle Greed", description: "Only the most subtle form of greed (lobha) remains.", color: "#3B82F6" },
            11: { nameHi: "उपशांत मोह", nameEn: "Upashanta Moha", english: "Subsided Delusion", description: "All deluding karmas are temporarily subsided but not destroyed.", color: "#6366F1" },
            12: { nameHi: "क्षीणमोह", nameEn: "Kshina Moha", english: "Destroyed Delusion", description: "All deluding karmas are permanently destroyed. No return to lower stages.", color: "#8B5CF6" },
            13: { nameHi: "सयोगकेवली", nameEn: "Sayogakevali", english: "Omniscient with Activity", description: "Soul achieves omniscience but still has bodily activities.", color: "#EC4899" },
            14: { nameHi: "अयोगकेवली", nameEn: "Ayogakevali", english: "Omniscient without Activity", description: "Final stage before liberation. No mental, verbal, or physical activities.", color: "#F59E0B" }
        };

        const transitionRules = {
            1: { canGoTo: [3, 4, 5], description: "Can progress to mixed belief, right belief, or partial vows" },
            2: { canGoTo: [1], description: "Falls back to false belief" },
            3: { canGoTo: [1, 4], description: "Can fall to false belief or progress to right belief" },
            4: { canGoTo: [1, 2, 3, 5, 7], description: "Multiple paths including direct jump to complete vows" },
            5: { canGoTo: [1, 4, 6], description: "Can fall back or progress to monastic life" },
            6: { canGoTo: [5, 7, 8], description: "Can progress to careful conduct or spiritual ladder" },
            7: { canGoTo: [6, 8], description: "Can become careless or continue ascending" },
            8: { canGoTo: [7, 9], description: "Can fall back or continue ascending" },
            9: { canGoTo: [7, 10], description: "Can fall back or reach subtle greed stage" },
            10: { canGoTo: [7, 11, 12], description: "Can fall, subside, or destroy delusion" },
            11: { canGoTo: [1, 12, 13], description: "Can fall completely, switch paths, or achieve omniscience" },
            12: { canGoTo: [13], description: "Progresses to omniscience" },
            13: { canGoTo: [14], description: "Final transition to liberation" },
            14: { canGoTo: [], description: "Liberation (Moksha) - No further transitions" }
        };

        // Game state
        let currentGunasthan = 1;
        let totalMoves = 0;
        let highestReached = 1;
        let gameStartTime = Date.now();
        let gameHistory = [];
        let karmaLevels = {
            'मोहनीय': 100,
            'ज्ञानावरणीय': 80,
            'दर्शनावरणीय': 80,
            'अन्तराय': 70
        };

        // Game scenarios and content
        const gameScenarios = {
            1: {
                content: "आप संसार के भ्रम में फंसे हुए एक जीव हैं। आपको सत्य और असत्य का भेद नहीं पता है। आप सभी प्रकार के कर्मों से बंधे हुए हैं।",
                scenario: "आप एक मंदिर में जाते हैं और वहां जैन आचार्य का प्रवचन सुनते हैं। आप क्या करेंगे?",
                choices: [
                    { target: 3, title: "मिश्रित विचार", description: "आचार्य की कुछ बातें सही लगती हैं, कुछ गलत", difficulty: "medium", karma: -5 },
                    { target: 4, title: "सम्यक्त्व प्राप्ति", description: "पूर्ण श्रद्धा के साथ सत्य को स्वीकार करना", difficulty: "hard", karma: -20 },
                    { target: 5, title: "व्रत धारण", description: "तुरंत आंशिक व्रत लेना (कठिन मार्ग)", difficulty: "expert", karma: -30 }
                ]
            },
            3: {
                content: "आपके मन में सत्य और असत्य दोनों प्रकार के विचार हैं। यह अस्थिर स्थिति है।",
                scenario: "आपको अपने विचारों में स्पष्टता लानी होगी।",
                choices: [
                    { target: 1, title: "मिथ्यात्व में वापसी", description: "पुराने गलत विचारों में लौटना", difficulty: "easy", karma: 10 },
                    { target: 4, title: "सम्यक्त्व स्थापना", description: "सही मार्ग पर दृढ़ता से चलना", difficulty: "medium", karma: -15 }
                ]
            },
            4: {
                content: "आपने सम्यक्त्व प्राप्त कर लिया है! अब आप सत्य को जानते हैं, लेकिन अभी भी चारित्र नहीं अपनाया है।",
                scenario: "सम्यक्त्व के बाद अगला कदम क्या होगा?",
                choices: [
                    { target: 5, title: "आंशिक व्रत", description: "गृहस्थ के रूप में आंशिक व्रत लेना", difficulty: "medium", karma: -15 },
                    { target: 7, title: "पूर्ण संयम", description: "सीधे मुनि दीक्षा लेना (दुर्लभ)", difficulty: "expert", karma: -40 },
                    { target: 1, title: "गिरावट", description: "प्रमाद के कारण गिरना", difficulty: "none", karma: 20 }
                ]
            },
            5: {
                content: "आपने गृहस्थ के रूप में आंशिक व्रत ले लिए हैं। आप हिंसा से बचते हैं लेकिन पूर्ण संयम नहीं है।",
                scenario: "आगे की आध्यात्मिक यात्रा के लिए क्या करेंगे?",
                choices: [
                    { target: 6, title: "मुनि दीक्षा", description: "पूर्ण संयम अपनाना", difficulty: "hard", karma: -25 },
                    { target: 4, title: "सम्यक्त्व पर ध्यान", description: "पहले दर्शन को और मजबूत बनाना", difficulty: "easy", karma: -5 },
                    { target: 1, title: "संसार में वापसी", description: "भौतिक प्रलोभनों में फंसना", difficulty: "none", karma: 30 }
                ]
            },
            6: {
                content: "आपने पूर्ण संयम अपना लिया है लेकिन अभी भी प्रमाद (लापरवाही) है।",
                scenario: "मुनि जीवन में आपकी साधना कैसी चल रही है?",
                choices: [
                    { target: 7, title: "अप्रमत्त बनना", description: "पूर्ण सावधानी के साथ साधना", difficulty: "medium", karma: -15 },
                    { target: 8, title: "गुणस्थान सीढ़ी", description: "तीव्र साधना से ऊंचे स्तर पर जाना", difficulty: "hard", karma: -30 },
                    { target: 5, title: "गृहस्थ में वापसी", description: "कठिनाई के कारण वापस लौटना", difficulty: "none", karma: 15 }
                ]
            }
            // Add more scenarios for higher gunasthans...
        };

        // Initialize game
        function initGame() {
            updateDisplay();
            updateProgressPath();
            updateKarmaDisplay();
            startTimer();
        }

        function updateDisplay() {
            const gunasthan = gunasthansData[currentGunasthan];
            
            // Update gunasthan display
            const displayEl = document.getElementById('gunasthan-display');
            displayEl.style.background = `linear-gradient(135deg, ${gunasthan.color}, ${gunasthan.color}cc)`;
            displayEl.innerHTML = `
                <div class="gunasthan-number">${currentGunasthan}</div>
                <div class="gunasthan-name">${gunasthan.nameHi}</div>
                <div class="gunasthan-english">${gunasthan.nameEn} - ${gunasthan.english}</div>
                <div class="gunasthan-description">${gunasthan.description}</div>
            `;
            
            // Update content and choices
            const scenario = gameScenarios[currentGunasthan];
            if (scenario) {
                document.getElementById('game-content').innerHTML = `
                    <p><strong>स्थिति:</strong> ${scenario.content}</p>
                    <p><strong>परिस्थिति:</strong> ${scenario.scenario}</p>
                `;
                
                updateChoices(scenario.choices);
            } else {
                document.getElementById('game-content').innerHTML = `
                    <p>आपने ${gunasthan.nameHi} गुणस्थान प्राप्त किया है!</p>
                `;
                updateChoices([]);
            }
            
            // Update stats
            document.getElementById('current-stage').textContent = currentGunasthan;
            document.getElementById('total-moves').textContent = totalMoves;
            document.getElementById('highest-reached').textContent = highestReached;
        }

        function updateChoices(choices) {
            const container = document.getElementById('choices-container');
            if (!choices || choices.length === 0) {
                if (currentGunasthan === 14) {
                    container.innerHTML = `
                        <div class="message success">
                            🎉 बधाई हो! आपने मोक्ष प्राप्त कर लिया है! 
                            आप ने सभी 14 गुणस्थानों की यात्रा पूरी की है।
                        </div>
                    `;
                } else {
                    container.innerHTML = `<div class="message info">इस गुणस्थान के लिए अभी विकल्प विकसित किए जा रहे हैं...</div>`;
                }
                return;
            }
            
            let html = '';
            choices.forEach((choice, index) => {
                const isValid = transitionRules[currentGunasthan].canGoTo.includes(choice.target);
                const difficultyColor = {
                    'easy': '#10b981',
                    'medium': '#f59e0b', 
                    'hard': '#ef4444',
                    'expert': '#8b5cf6',
                    'none': '#6b7280'
                }[choice.difficulty];
                
                html += `
                    <button class="choice-button ${!isValid ? 'disabled' : ''}" 
                            onclick="makeChoice(${choice.target}, ${index}, '${choice.difficulty}', ${choice.karma})"
                            ${!isValid ? 'disabled' : ''}>
                        <div class="choice-title">
                            ${choice.title} 
                            <span style="color: ${difficultyColor}; font-size: 12px;">(${choice.difficulty})</span>
                        </div>
                        <div class="choice-description">${choice.description}</div>
                        <div style="font-size: 12px; margin-top: 5px;">
                            कर्म प्रभाव: ${choice.karma > 0 ? '+' : ''}${choice.karma}
                        </div>
                    </button>
                `;
            });
            
            container.innerHTML = html;
        }

        function makeChoice(targetGunasthan, choiceIndex, difficulty, karmaEffect) {
            const scenario = gameScenarios[currentGunasthan];
            const choice = scenario.choices[choiceIndex];
            
            // Check if transition is valid
            if (!transitionRules[currentGunasthan].canGoTo.includes(targetGunasthan)) {
                showMessage('error', '❌ यह संक्रमण संभव नहीं है! कृपया वैध विकल्प चुनें।');
                return;
            }
            
            // Handle difficulty-based quiz
            if (difficulty === 'hard' || difficulty === 'expert') {
                showQuiz(targetGunasthan, choice, karmaEffect);
                return;
            }
            
            executeTransition(targetGunasthan, choice, karmaEffect);
        }

        function showQuiz(targetGunasthan, choice, karmaEffect) {
            const questions = {
                4: {
                    question: "सम्यक्त्व प्राप्त करने के लिए सबसे महत्वपूर्ण क्या है?",
                    options: [
                        "धन-संपत्ति",
                        "सात तत्वों में श्रद्धा",
                        "केवल तप करना",
                        "सिर्फ पूजा-पाठ"
                    ],
                    correct: 1
                },
                5: {
                    question: "देशविरत का अर्थ क्या है?",
                    options: [
                        "पूर्ण त्याग",
                        "आंशिक व्रत",
                        "केवल ध्यान",
                        "तीर्थयात्रा"
                    ],
                    correct: 1
                },
                7: {
                    question: "अप्रमत्त विरत क्या है?",
                    options: [
                        "लापरवाह आचरण",
                        "सावधान आचरण",
                        "कोई आचरण नहीं",
                        "मिश्रित आचरण"
                    ],
                    correct: 1
                }
            };
            
            const quiz = questions[targetGunasthan];
            if (!quiz) {
                executeTransition(targetGunasthan, choice, karmaEffect);
                return;
            }
            
            let html = `
                <div class="quiz-container">
                    <div class="quiz-question">${quiz.question}</div>
                    <div class="quiz-options">
            `;
            
            quiz.options.forEach((option, index) => {
                html += `
                    <div class="quiz-option" onclick="selectQuizOption(${index})">
                        ${option}
                    </div>
                `;
            });
            
            html += `
                    </div>
                    <div style="text-align: center; margin-top: 15px;">
                        <button class="action-button primary" onclick="submitQuiz(${targetGunasthan}, ${JSON.stringify(choice).replace(/"/g, '&quot;')}, ${karmaEffect}, ${quiz.correct})">
                            उत्तर प्रस्तुत करें
                        </button>
                    </div>
                </div>
            `;
            
            document.getElementById('quiz-container').innerHTML = html;
            document.getElementById('quiz-container').classList.remove('hidden');
        }

        let selectedQuizOption = -1;

        function selectQuizOption(index) {
            document.querySelectorAll('.quiz-option').forEach(opt => opt.classList.remove('selected'));
            document.querySelectorAll('.quiz-option')[index].classList.add('selected');
            selectedQuizOption = index;
        }

        function submitQuiz(targetGunasthan, choice, karmaEffect, correctAnswer) {
            if (selectedQuizOption === -1) {
                showMessage('warning', '⚠️ कृपया एक विकल्प चुनें।');
                return;
            }
            
            document.getElementById('quiz-container').classList.add('hidden');
            
            if (selectedQuizOption === correctAnswer) {
                showMessage('success', '✅ सही उत्तर! आप आगे बढ़ सकते हैं।');
                executeTransition(targetGunasthan, choice, karmaEffect);
            } else {
                showMessage('error', '❌ गलत उत्तर! आप इस गुणस्थान में ही रहेंगे और अधिक अध्ययन करें।');
                updateKarmaLevels(10); // Penalty
            }
            
            selectedQuizOption = -1;
        }

        function executeTransition(targetGunasthan, choice, karmaEffect) {
            // Record history
            gameHistory.push({
                from: currentGunasthan,
                to: targetGunasthan,
                choice: choice.title,
                time: Date.now() - gameStartTime
            });
            
            // Update game state
            currentGunasthan = targetGunasthan;
            totalMoves++;
            if (currentGunasthan > highestReached) {
                highestReached = currentGunasthan;
            }
            
            // Update karma levels
            updateKarmaLevels(karmaEffect);
            
            // Show transition message
            const gunasthan = gunasthansData[targetGunasthan];
            if (targetGunasthan > gameHistory[gameHistory.length - 1]?.from || 0) {
                showMessage('success', `🎉 बधाई हो! आप ${gunasthan.nameHi} (गुणस्थान ${targetGunasthan}) में पहुंच गए हैं!`);
            } else {
                showMessage('warning', `📉 आप ${gunasthan.nameHi} (गुणस्थान ${targetGunasthan}) में आ गए हैं।`);
            }
            
            // Special messages for significant achievements
            if (targetGunasthan === 4) {
                showMessage('info', '🌟 सम्यक्त्व प्राप्ति! अब आप मोक्ष मार्ग पर हैं।');
            } else if (targetGunasthan === 6) {
                showMessage('info', '🙏 मुनि दीक्षा! आपने संसार का त्याग कर दिया है।');
            } else if (targetGunasthan === 12) {
                showMessage('info', '✨ मोहनीय कर्म का नाश! अब केवलज्ञान निकट है।');
            } else if (targetGunasthan === 14) {
                showMessage('success', '🎯 मोक्ष प्राप्ति! आपने संसार चक्र से मुक्ति पाई है!');
            }
            
            // Update display
            setTimeout(() => {
                updateDisplay();
                updateProgressPath();
                updateKarmaDisplay();
            }, 1000);
        }

        function updateKarmaLevels(change) {
            Object.keys(karmaLevels).forEach(karma => {
                karmaLevels[karma] = Math.max(0, Math.min(100, karmaLevels[karma] + change));
            });
        }

        function updateKarmaDisplay() {
            const container = document.getElementById('karma-display');
            
            let html = `
                <div class="karma-title">कर्म स्थिति (Karma Levels)</div>
                <div class="karma-bars">
            `;
            
            Object.entries(karmaLevels).forEach(([name, level]) => {
                const color = level > 70 ? '#ef4444' : level > 40 ? '#f59e0b' : '#10b981';
                html += `
                    <div class="karma-bar">
                        <div class="karma-name">${name}</div>
                        <div class="karma-progress">
                            <div class="karma-fill" style="width: ${level}%; background: ${color}"></div>
                        </div>
                    </div>
                `;
            });
            
            html += '</div>';
            container.innerHTML = html;
        }

        function updateProgressPath() {
            const container = document.getElementById('progress-path');
            let html = '';
            
            for (let i = 1; i <= 14; i++) {
                let className = 'path-stage ';
                if (i < currentGunasthan) className += 'completed';
                else if (i === currentGunasthan) className += 'current';
                else className += 'locked';
                
                html += `<div class="${className}">${i}</div>`;
                if (i < 14) html += '<div class="path-arrow">→</div>';
            }
            
            container.innerHTML = html;
        }

        function showMessage(type, text) {
            const container = document.getElementById('message-container');
            container.innerHTML = `<div class="message ${type}">${text}</div>`;
            
            setTimeout(() => {
                container.innerHTML = '';
            }, 5000);
        }

        function startTimer() {
            setInterval(() => {
                const elapsed = Math.floor((Date.now() - gameStartTime) / 1000);
                const minutes = Math.floor(elapsed / 60);
                const seconds = elapsed % 60;
                document.getElementById('game-time').textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            }, 1000);
        }

        function resetGame() {
            if (confirm('क्या आप वाकई नई यात्रा शुरू करना चाहते हैं?')) {
                currentGunasthan = 1;
                totalMoves = 0;
                highestReached = 1;
                gameStartTime = Date.now();
                gameHistory = [];
                karmaLevels = {
                    'मोहनीय': 100,
                    'ज्ञानावरणीय': 80,
                    'दर्शनावरणीय': 80,
                    'अन्तराय': 70
                };
                
                document.getElementById('message-container').innerHTML = '';
                document.getElementById('quiz-container').classList.add('hidden');
                
                updateDisplay();
                updateProgressPath();
                updateKarmaDisplay();
            }
        }

        function showHelp() {
            showMessage('info', `
                🎯 <strong>खेल का उद्देश्य:</strong> 14 गुणस्थानों की यात्रा करके मोक्ष प्राप्त करना।<br>
                📚 <strong>कैसे खेलें:</strong> हर स्थिति में सही विकल्प चुनें। कठिन विकल्पों के लिए प्रश्न का उत्तर दें।<br>
                ⚡ <strong>कर्म प्रभाव:</strong> आपके चुनाव कर्म स्तर को प्रभावित करते हैं।<br>
                🏆 <strong>लक्ष्य:</strong> कम से कम चरणों में गुणस्थान 14 तक पहुंचना।
            `);
        }

        function showProgress() {
            let progressText = `
                📊 <strong>आपकी प्रगति:</strong><br>
                • वर्तमान गुणस्थान: ${currentGunasthan} (${gunasthansData[currentGunasthan].nameHi})<br>
                • कुल संक्रमण: ${totalMoves}<br>
                • सर्वोच्च स्तर: ${highestReached}<br>
                • यात्रा समय: ${document.getElementById('game-time').textContent}
            `;
            
            if (gameHistory.length > 0) {
                progressText += '<br><br><strong>यात्रा इतिहास:</strong><br>';
                gameHistory.slice(-5).forEach(move => {
                    progressText += `• G${move.from} → G${move.to}: ${move.choice}<br>`;
                });
            }
            
            showMessage('info', progressText);
        }

        // Initialize the game when page loads
        document.addEventListener('DOMContentLoaded', initGame);
    </script>
</body>
</html>
